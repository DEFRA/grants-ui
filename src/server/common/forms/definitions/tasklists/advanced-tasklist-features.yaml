tasklist:
  id: advanced-features
  title: Advanced Tasklist Features Demonstration
  helpText: This example demonstrates all available complex condition patterns and features
  
  # Define reusable conditions that showcase different features
  conditions:
    # NESTED CONDITIONS DEMO
    # Shows how to create complex multi-level AND/OR logic
    nestedAndOrCondition:
      type: conditional
      rules:
        - if:
            # Example of nested AND with OR inside
            and:
              - field: "demo-data.userType"
                equals: "premium"
              - or:
                  - field: "demo-data.accountValue"
                    gt: 10000
                  - field: "demo-data.yearsActive"
                    gte: 5
          then: "not_yet_started"
        - if:
            # Example of nested OR with AND inside
            or:
              - and:
                  - field: "demo-data.userType"
                    equals: "basic"
                  - field: "demo-data.verified"
                    equals: true
              - field: "demo-data.specialAccess"
                equals: true
          then: "not_yet_started"
      default: "hidden"
    
    # NUMERIC COMPARISONS DEMO
    # Shows numeric comparison operators
    numericThresholdCondition:
      type: conditional
      rules:
        - if:
            field: "numeric-demo.value"
            gt: 100  # Greater than
          then: "not_yet_started"
      default: "cannot_start_yet"
    
    numericRangeCondition:
      type: conditional
      rules:
        - if:
            # Value must be >= 50 AND < 200
            and:
              - field: "numeric-demo.value"
                gte: 50  # Greater than or equal
              - field: "numeric-demo.value"
                lt: 200  # Less than
          then: "not_yet_started"
      default: "hidden"
    
    # ARRAY OPERATIONS DEMO
    # Shows in/notIn array operators
    arrayInclusionCondition:
      type: conditional
      rules:
        - if:
            field: "array-demo.selectedOption"
            in: ["option1", "option2", "option3"]  # Value must be in this array
          then: "not_yet_started"
      default: "hidden"
    
    arrayExclusionCondition:
      type: conditional
      rules:
        - if:
            field: "array-demo.selectedOption"
            notIn: ["restricted1", "restricted2"]  # Value must NOT be in this array
          then: "not_yet_started"
      default: "cannot_start_yet"
    
    # FIELD EXISTENCE AND EMPTY CHECKS
    fieldExistenceCondition:
      type: conditional
      rules:
        - if:
            field: "existence-demo.optionalField"
            exists: true  # Field must exist (even if null/empty)
          then: "not_yet_started"
        - if:
            field: "existence-demo.requiredField"
            exists: false  # Field must not exist
          then: "hidden"
      default: "cannot_start_yet"
    
    emptyCheckCondition:
      type: conditional
      rules:
        - if:
            field: "existence-demo.textField"
            isEmpty: false  # Field must have a value (not null/undefined/"")
          then: "not_yet_started"
      default: "cannot_start_yet"
    
    # NOT OPERATOR DEMO
    # Shows how to negate conditions
    negationCondition:
      type: conditional
      rules:
        - if:
            not:  # Negates the condition inside
              field: "demo-data.restricted"
              equals: true
          then: "not_yet_started"
      default: "hidden"
    
    # DEPENDENCY TYPE CONDITIONS
    # Shows dependency-based status determination
    dependencyBasedCondition:
      type: dependency
      dependsOn:
        anyOf: ["dependency-setup", "alternative-setup"]
      statusMap:
        true: "not_yet_started"   # When dependencies are met
        false: "cannot_start_yet"  # When dependencies are not met
        default: "hidden"
  
  sections:
    - id: setup
      title: 1. Setup Demo Data
      subsections:
        - id: demo-data
          title: Demo Data Setup
          href: demo-data
          required: true
        - id: numeric-demo
          title: Numeric Values Setup
          href: numeric-demo
          required: true
        - id: array-demo
          title: Array Demo Setup
          href: array-demo
          required: true
        - id: existence-demo
          title: Existence Demo Setup
          href: existence-demo
          required: false

    - id: nested-conditions
      title: 2. Nested Conditions Demo
      subsections:
        - id: multi-level-logic
          title: Multi-Level AND-OR Logic
          href: multi-level-logic
          condition: nestedAndOrCondition
        - id: negation-example
          title: NOT Operator Example
          href: negation-example
          condition: negationCondition

    - id: numeric-comparisons
      title: 3. Numeric Comparisons
      subsections:
        - id: greater-than-check
          title: Greater Than Check (value > 100)
          href: greater-than-check
          condition: numericThresholdCondition
        - id: range-check
          title: Range Check (50 <= value < 200)
          href: range-check
          condition: numericRangeCondition

    - id: dependency-patterns
      title: 4. Dependency Patterns
      subsections:
        - id: dependency-setup
          title: Dependency Setup Option A
          href: dependency-setup
        - id: alternative-setup
          title: Dependency Setup Option B
          href: alternative-setup
        - id: all-of-dependencies
          title: All Of Dependencies
          href: all-of-dependencies
          # Simple array syntax for basic allOf
          dependsOn: ["demo-data", "numeric-demo", "array-demo"]
        - id: any-of-dependencies
          title: Any Of Dependencies
          href: any-of-dependencies
          # Object syntax for anyOf
          dependsOn:
            anyOf: ["dependency-setup", "alternative-setup"]
        - id: none-of-dependencies
          title: None Of Dependencies
          href: none-of-dependencies
          # Must not have completed these
          dependsOn:
            noneOf: ["restricted-section-1", "restricted-section-2"]
        - id: mixed-dependencies
          title: Mixed Dependencies with Condition
          href: mixed-dependencies
          # Combines dependsOn with condition
          dependsOn:
            anyOf: ["all-of-dependencies", "any-of-dependencies"]
          condition: dependencyBasedCondition

    - id: array-operations
      title: 5. Array Operations
      subsections:
        - id: in-array-check
          title: In Array Check
          href: in-array-check
          condition: arrayInclusionCondition
        - id: not-in-array
          title: Not In Array Check
          href: not-in-array
          condition: arrayExclusionCondition

    - id: field-checks
      title: 6. Field Existence Checks
      subsections:
        - id: field-exists
          title: Field Existence Check
          href: field-exists
          condition: fieldExistenceCondition
        - id: empty-check
          title: Empty Value Check
          href: empty-check
          condition: emptyCheckCondition

    - id: computed-status
      title: 7. Computed Status Rules
      subsections:
        - id: restricted-section-1
          title: Restricted Section 1
          href: restricted-section-1
          required: false
        - id: restricted-section-2
          title: Restricted Section 2
          href: restricted-section-2
          required: false
        - id: basic-computed-status
          title: Basic Computed Status
          href: basic-computed-status
        - id: advanced-computed-status
          title: Advanced Computed Status
          href: advanced-computed-status

  # Status rules demonstrate computed statuses based on completion of other sections
  statusRules:
    # Simple status rule - all must be complete
    basic-computed-status:
      type: allComplete
      dependsOn:
        - demo-data
        - numeric-demo
        - array-demo
    
    # Advanced status rule - references other computed statuses
    advanced-computed-status:
      type: allComplete
      dependsOn:
        - basic-computed-status  # Can depend on other computed statuses
        - all-of-dependencies
        - any-of-dependencies
        # Note: Can mix regular sections and computed statuses